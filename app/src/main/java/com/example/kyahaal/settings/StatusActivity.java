package com.example.kyahaal.settings;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.ActionBar;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.example.kyahaal.R;import com.example.kyahaal.ui.ChangeUserStatus;import com.google.android.gms.tasks.OnCanceledListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import java.util.Objects;import static com.google.firebase.database.ServerValue.TIMESTAMP;public class StatusActivity extends AppCompatActivity {    String status;    Adapter adapter;    ListView listView;    TextView textView;    ArrayList<String> statustext;    FirebaseAuth mAuth;    DatabaseReference mRootref;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_status);        Toolbar toolbar = findViewById(R.id.action_bar);        setSupportActionBar(toolbar);        ActionBar actionBar=getSupportActionBar();        assert actionBar != null;        actionBar.setDisplayHomeAsUpEnabled(true);        actionBar.setHomeButtonEnabled(true);        actionBar.setTitle("About");        Intent  intent=getIntent();        status = intent.getStringExtra("status");        textView=findViewById(R.id.text2);        textView.setText(status);        mAuth=FirebaseAuth.getInstance();        statustext=new ArrayList<>();        mRootref=FirebaseDatabase.getInstance().getReference().child("User").child(Objects.requireNonNull(mAuth.getCurrentUser()).getUid());    }    @Override    protected void onResume() {        super.onResume();        setOnline();        mAuth=FirebaseAuth.getInstance();        String ret=readFromFile(this);        JSONObject json = null;        try {            if (ret!=null){                json = new JSONObject(ret);                JSONArray statustextjson = json.optJSONArray("statustext");                if (statustextjson != null) {                    for (int i = 0; i < statustextjson.length(); i++) {                        try {                            if (!statustext.contains(statustextjson.getString(i))) {                                statustext.add(statustextjson.getString(i));                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }            }else {                writenewstatuslist();            }        } catch (JSONException e) {            e.printStackTrace();            writenewstatuslist();        }        adapter = new Adapter(this, statustext);        listView=findViewById(R.id.listview1);        textView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String status1=textView.getText().toString();                Intent intent1=new Intent(StatusActivity.this, ChangeUserStatus.class);                intent1.putExtra("status",status1);                startActivityForResult(intent1,1);            }        });        for (int i=0;i<statustext.size();i++){            String s=adapter.getItem(i);            if (textView.getText().equals(s)){                adapter.setSelectedindex(i);                adapter.setSelectable(true);                listView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);                listView.setAdapter(adapter);                break;            }else {                adapter.setSelectable(false);                listView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);                listView.setAdapter(adapter);            }        }        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {            @Override            public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id) {                new AlertDialog.Builder(StatusActivity.this).setTitle("Delete Status").setMessage("Are you sure you want to delete this?").setPositiveButton("yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        statustext.remove(position);                        adapter.setSelectable(false);                        adapter.notifyDataSetChanged();                    }                }).setNegativeButton("No",null).show();                return true;            }        });        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {                updatestatus(position);            }        });    }    @Override    protected void onPause() {        super.onPause();        setTimestamp();        JSONObject json=new JSONObject();        try {            json.put("statustext",new JSONArray(statustext));            writeTOFile(json.toString(),this);        } catch (JSONException e) {            e.printStackTrace();        }    }    @Override    protected void onStart() {        super.onStart();    }    @Override    protected void onStop() {        super.onStop();        JSONObject json=new JSONObject();        try {            json.put("statustext",new JSONArray(statustext));            writeTOFile(json.toString(),this);        } catch (JSONException e) {            e.printStackTrace();        }    }    class Adapter extends ArrayAdapter<String> {        Context context;        boolean selectable=false;        public void setSelectable(boolean selectable) {            this.selectable = selectable;        }        ArrayList<String> statusarray;        public void setSelectedindex(int selectedindex) {            this.selectedindex = selectedindex;        }        private int selectedindex=-1;        Adapter(Context c, ArrayList<String> status) {            super(c, R.layout.mylist, R.id.text4, status);            this.context = c;            this.statusarray = status;        }        class MyViewHolder {            TextView textView;            ImageView imageView;            MyViewHolder(View v) {                textView = v.findViewById(R.id.text4);                imageView=v.findViewById(R.id.imageview);            }        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            View row = convertView;            MyViewHolder holder=null;            if(row==null)            {                LayoutInflater inflater = (LayoutInflater) context.getSystemService(LAYOUT_INFLATER_SERVICE);                row = inflater.inflate(R.layout.mylist, parent, false);                holder = new MyViewHolder(row);                row.setTag(holder);            }            else            {                holder= (MyViewHolder) row.getTag();            }            holder.textView.setText(statusarray.get(position));            if (selectedindex==position && selectable){                holder.imageView.setVisibility(View.VISIBLE);            }else {                holder.imageView.setVisibility(View.INVISIBLE);            }            return row;        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode==1 && data!=null){            String status = data.getStringExtra("status");            statustext.add(0,status);            adapter.notifyDataSetChanged();            updatestatus(0);        }    }    public void writeTOFile(String data,Context context){        try {            OutputStreamWriter outputStreamWriter=new OutputStreamWriter(context.openFileOutput("statustxt.txt",MODE_PRIVATE));            outputStreamWriter.write(data);            outputStreamWriter.close();        } catch (IOException e) {            e.printStackTrace();        }    }    private String readFromFile(Context context){        String ret="";        try {            InputStream inputStream=context.openFileInput("statustxt.txt");            if (inputStream!=null){                InputStreamReader inputStreamReader=new InputStreamReader(inputStream);                BufferedReader bufferedReader=new BufferedReader(inputStreamReader);                String receivestring="";                StringBuilder stringBuilder=new StringBuilder();                while ((receivestring=bufferedReader.readLine())!=null){                    stringBuilder.append("\n").append(receivestring);                }                inputStream.close();                ret=stringBuilder.toString();            }else {                writenewstatuslist();            }        } catch (IOException e) {            e.printStackTrace();        }        return ret;    }    public void writenewstatuslist(){        statustext.add("Available");        statustext.add("Busy");        statustext.add("At Home");        statustext.add("At College");        statustext.add("At Movies");        statustext.add("At Work");        statustext.add("Battery about to die");        statustext.add("In a Meeting");        statustext.add("Sleeping");        statustext.add("Urgent Call Only");        statustext.add("Cant talk, KyaHaal only");    }    public void updatestatus(int pos){        final int position=pos;        final String value=adapter.getItem(position);        final ProgressDialog statusupdatepd=new ProgressDialog(StatusActivity.this);        statusupdatepd.setMessage("Updating....");        statusupdatepd.setCanceledOnTouchOutside(false);        final Thread statusupdatethread=new Thread(new Runnable() {            @Override            public void run() {                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        statusupdatepd.show();                    }                });                FirebaseUser currentUser=mAuth.getCurrentUser();                if (currentUser!=null){                    String uid=currentUser.getUid();                    final FirebaseDatabase database = FirebaseDatabase.getInstance();                    DatabaseReference comref=database.getReference().child("User").child(uid);                    Map<String,Object> map=new HashMap<>();                    map.put("status",value);                    comref.updateChildren(map).addOnSuccessListener(new OnSuccessListener<Void>() {                        @Override                        public void onSuccess(Void aVoid) {                            SharedPreferences.Editor editor=getSharedPreferences ( "UserData" ,0).edit ();                            editor.putString ( "status",value );                            editor.apply ();                            textView.setText(value);                            adapter.setSelectedindex(position);                            adapter.setSelectable(true);                            adapter.notifyDataSetChanged();                            if (statusupdatepd.isShowing()){                                statusupdatepd.dismiss();                            }                        }                    }).addOnFailureListener(new OnFailureListener() {                        @Override                        public void onFailure(@NonNull Exception e) {                            if (statusupdatepd.isShowing()){                                statusupdatepd.dismiss();                            }                            Toast.makeText(StatusActivity.this,"Sorry!!, we are unable to update your status. Please check you internet connection or try again after sometime.", Toast.LENGTH_LONG).show();                        }                    }).addOnCanceledListener(new OnCanceledListener() {                        @Override                        public void onCanceled() {                            if (statusupdatepd.isShowing()){                                statusupdatepd.dismiss();                            }                            Toast.makeText(StatusActivity.this,"Sorry!!, we are unable to update your status. Please check you internet connection or try again after sometime.", Toast.LENGTH_LONG).show();                        }                    });                }            }        });        statusupdatethread.start();    }    @Override    public void onBackPressed() {        super.onBackPressed();        overridePendingTransition(R.anim.slide_from_left,R.anim.slide_to_right);    }    @Override    public boolean onSupportNavigateUp() {        onBackPressed();        return true;    }    public void setOnline(){        mRootref.child("Online").setValue(true);    }    public void setTimestamp(){        mRootref.child("Online").setValue(false);        mRootref.child("seen").setValue(TIMESTAMP);    }}